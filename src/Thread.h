#ifndef __THREAD__
#define __THREAD__

#include "ThreadLock.h"

/*--------------------------------------------------------------------------------*/
/** Simple thread implementation
 */
/*--------------------------------------------------------------------------------*/
class AThread {
public:
	AThread();
	virtual ~AThread();

	/*--------------------------------------------------------------------------------*/
	/** Start thread
	 */
	/*--------------------------------------------------------------------------------*/
	virtual bool Start();

	/*--------------------------------------------------------------------------------*/
	/** Stop thread
	 */
	/*--------------------------------------------------------------------------------*/
	virtual void Stop();
	
protected:
	/*--------------------------------------------------------------------------------*/
	/** Static thread entry point
	 */
	/*--------------------------------------------------------------------------------*/
	static void *__ThreadStart(void *arg);

	/*--------------------------------------------------------------------------------*/
	/** Perform thread quitting operations such as releasing or signalling
	 */
	/*--------------------------------------------------------------------------------*/
	virtual void ThreadQuitting() {}

	/*--------------------------------------------------------------------------------*/
	/** This must be overloaded with the thread code
	 */
	/*--------------------------------------------------------------------------------*/
	virtual void *Run() = 0;

protected:
	pthread_t thread;
	bool      threadstarted;
	bool      quitthread;
};

#endif

